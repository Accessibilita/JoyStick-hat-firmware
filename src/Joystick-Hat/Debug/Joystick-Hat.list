
Joystick-Hat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028dc  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002aa0  08002aa0  00003aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ab8  08002ab8  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002ab8  08002ab8  00003ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ac0  08002ac0  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ac0  08002ac0  00003ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ac4  08002ac4  00003ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002ac8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  2000000c  08002ad4  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08002ad4  000041a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2ba  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f58  00000000  00000000  0000f2f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  00011250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000079d  00000000  00000000  00011c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000222eb  00000000  00000000  000123e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e0a9  00000000  00000000  000346d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2ea4  00000000  00000000  00042779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011561d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002794  00000000  00000000  00115660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00117df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002a88 	.word	0x08002a88

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002a88 	.word	0x08002a88

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004fa:	463b      	mov	r3, r7
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000506:	4b21      	ldr	r3, [pc, #132]	@ (800058c <MX_ADC1_Init+0x98>)
 8000508:	4a21      	ldr	r2, [pc, #132]	@ (8000590 <MX_ADC1_Init+0x9c>)
 800050a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800050c:	4b1f      	ldr	r3, [pc, #124]	@ (800058c <MX_ADC1_Init+0x98>)
 800050e:	2200      	movs	r2, #0
 8000510:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000512:	4b1e      	ldr	r3, [pc, #120]	@ (800058c <MX_ADC1_Init+0x98>)
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000518:	4b1c      	ldr	r3, [pc, #112]	@ (800058c <MX_ADC1_Init+0x98>)
 800051a:	2200      	movs	r2, #0
 800051c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800051e:	4b1b      	ldr	r3, [pc, #108]	@ (800058c <MX_ADC1_Init+0x98>)
 8000520:	2200      	movs	r2, #0
 8000522:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000524:	4b19      	ldr	r3, [pc, #100]	@ (800058c <MX_ADC1_Init+0x98>)
 8000526:	2200      	movs	r2, #0
 8000528:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800052c:	4b17      	ldr	r3, [pc, #92]	@ (800058c <MX_ADC1_Init+0x98>)
 800052e:	2200      	movs	r2, #0
 8000530:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000532:	4b16      	ldr	r3, [pc, #88]	@ (800058c <MX_ADC1_Init+0x98>)
 8000534:	4a17      	ldr	r2, [pc, #92]	@ (8000594 <MX_ADC1_Init+0xa0>)
 8000536:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000538:	4b14      	ldr	r3, [pc, #80]	@ (800058c <MX_ADC1_Init+0x98>)
 800053a:	2200      	movs	r2, #0
 800053c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800053e:	4b13      	ldr	r3, [pc, #76]	@ (800058c <MX_ADC1_Init+0x98>)
 8000540:	2201      	movs	r2, #1
 8000542:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000544:	4b11      	ldr	r3, [pc, #68]	@ (800058c <MX_ADC1_Init+0x98>)
 8000546:	2200      	movs	r2, #0
 8000548:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800054c:	4b0f      	ldr	r3, [pc, #60]	@ (800058c <MX_ADC1_Init+0x98>)
 800054e:	2201      	movs	r2, #1
 8000550:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000552:	480e      	ldr	r0, [pc, #56]	@ (800058c <MX_ADC1_Init+0x98>)
 8000554:	f000 fcb6 	bl	8000ec4 <HAL_ADC_Init>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800055e:	f000 f9af 	bl	80008c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000562:	2300      	movs	r3, #0
 8000564:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000566:	2301      	movs	r3, #1
 8000568:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800056a:	2300      	movs	r3, #0
 800056c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800056e:	463b      	mov	r3, r7
 8000570:	4619      	mov	r1, r3
 8000572:	4806      	ldr	r0, [pc, #24]	@ (800058c <MX_ADC1_Init+0x98>)
 8000574:	f000 fcea 	bl	8000f4c <HAL_ADC_ConfigChannel>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800057e:	f000 f99f 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000582:	bf00      	nop
 8000584:	3710      	adds	r7, #16
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	20000028 	.word	0x20000028
 8000590:	40012000 	.word	0x40012000
 8000594:	0f000001 	.word	0x0f000001

08000598 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	@ 0x28
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a17      	ldr	r2, [pc, #92]	@ (8000614 <HAL_ADC_MspInit+0x7c>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d127      	bne.n	800060a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]
 80005be:	4b16      	ldr	r3, [pc, #88]	@ (8000618 <HAL_ADC_MspInit+0x80>)
 80005c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005c2:	4a15      	ldr	r2, [pc, #84]	@ (8000618 <HAL_ADC_MspInit+0x80>)
 80005c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80005ca:	4b13      	ldr	r3, [pc, #76]	@ (8000618 <HAL_ADC_MspInit+0x80>)
 80005cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005d2:	613b      	str	r3, [r7, #16]
 80005d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	4b0f      	ldr	r3, [pc, #60]	@ (8000618 <HAL_ADC_MspInit+0x80>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	4a0e      	ldr	r2, [pc, #56]	@ (8000618 <HAL_ADC_MspInit+0x80>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <HAL_ADC_MspInit+0x80>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 80005f2:	231b      	movs	r3, #27
 80005f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005f6:	2303      	movs	r3, #3
 80005f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	4619      	mov	r1, r3
 8000604:	4805      	ldr	r0, [pc, #20]	@ (800061c <HAL_ADC_MspInit+0x84>)
 8000606:	f000 ffb5 	bl	8001574 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800060a:	bf00      	nop
 800060c:	3728      	adds	r7, #40	@ 0x28
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40012000 	.word	0x40012000
 8000618:	40023800 	.word	0x40023800
 800061c:	40020000 	.word	0x40020000

08000620 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08a      	sub	sp, #40	@ 0x28
 8000624:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
 800063a:	4b58      	ldr	r3, [pc, #352]	@ (800079c <MX_GPIO_Init+0x17c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	4a57      	ldr	r2, [pc, #348]	@ (800079c <MX_GPIO_Init+0x17c>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6313      	str	r3, [r2, #48]	@ 0x30
 8000646:	4b55      	ldr	r3, [pc, #340]	@ (800079c <MX_GPIO_Init+0x17c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	4b51      	ldr	r3, [pc, #324]	@ (800079c <MX_GPIO_Init+0x17c>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	4a50      	ldr	r2, [pc, #320]	@ (800079c <MX_GPIO_Init+0x17c>)
 800065c:	f043 0310 	orr.w	r3, r3, #16
 8000660:	6313      	str	r3, [r2, #48]	@ 0x30
 8000662:	4b4e      	ldr	r3, [pc, #312]	@ (800079c <MX_GPIO_Init+0x17c>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	f003 0310 	and.w	r3, r3, #16
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	4b4a      	ldr	r3, [pc, #296]	@ (800079c <MX_GPIO_Init+0x17c>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	4a49      	ldr	r2, [pc, #292]	@ (800079c <MX_GPIO_Init+0x17c>)
 8000678:	f043 0308 	orr.w	r3, r3, #8
 800067c:	6313      	str	r3, [r2, #48]	@ 0x30
 800067e:	4b47      	ldr	r3, [pc, #284]	@ (800079c <MX_GPIO_Init+0x17c>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	f003 0308 	and.w	r3, r3, #8
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	4b43      	ldr	r3, [pc, #268]	@ (800079c <MX_GPIO_Init+0x17c>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	4a42      	ldr	r2, [pc, #264]	@ (800079c <MX_GPIO_Init+0x17c>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	6313      	str	r3, [r2, #48]	@ 0x30
 800069a:	4b40      	ldr	r3, [pc, #256]	@ (800079c <MX_GPIO_Init+0x17c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	4b3c      	ldr	r3, [pc, #240]	@ (800079c <MX_GPIO_Init+0x17c>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	4a3b      	ldr	r2, [pc, #236]	@ (800079c <MX_GPIO_Init+0x17c>)
 80006b0:	f043 0302 	orr.w	r3, r3, #2
 80006b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b6:	4b39      	ldr	r3, [pc, #228]	@ (800079c <MX_GPIO_Init+0x17c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	f003 0302 	and.w	r3, r3, #2
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2104      	movs	r1, #4
 80006c6:	4836      	ldr	r0, [pc, #216]	@ (80007a0 <MX_GPIO_Init+0x180>)
 80006c8:	f001 f8e8 	bl	800189c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2180      	movs	r1, #128	@ 0x80
 80006d0:	4834      	ldr	r0, [pc, #208]	@ (80007a4 <MX_GPIO_Init+0x184>)
 80006d2:	f001 f8e3 	bl	800189c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80006d6:	2200      	movs	r2, #0
 80006d8:	f44f 7178 	mov.w	r1, #992	@ 0x3e0
 80006dc:	4832      	ldr	r0, [pc, #200]	@ (80007a8 <MX_GPIO_Init+0x188>)
 80006de:	f001 f8dd 	bl	800189c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2103      	movs	r1, #3
 80006e6:	4831      	ldr	r0, [pc, #196]	@ (80007ac <MX_GPIO_Init+0x18c>)
 80006e8:	f001 f8d8 	bl	800189c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006ec:	2304      	movs	r3, #4
 80006ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f0:	2301      	movs	r3, #1
 80006f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f8:	2300      	movs	r3, #0
 80006fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	4619      	mov	r1, r3
 8000702:	4827      	ldr	r0, [pc, #156]	@ (80007a0 <MX_GPIO_Init+0x180>)
 8000704:	f000 ff36 	bl	8001574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE10 PE11 PE12
                           PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8000708:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 800070c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070e:	2300      	movs	r3, #0
 8000710:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	4619      	mov	r1, r3
 800071c:	4823      	ldr	r0, [pc, #140]	@ (80007ac <MX_GPIO_Init+0x18c>)
 800071e:	f000 ff29 	bl	8001574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000722:	f44f 537c 	mov.w	r3, #16128	@ 0x3f00
 8000726:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000728:	2300      	movs	r3, #0
 800072a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	4619      	mov	r1, r3
 8000736:	481b      	ldr	r0, [pc, #108]	@ (80007a4 <MX_GPIO_Init+0x184>)
 8000738:	f000 ff1c 	bl	8001574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800073c:	2380      	movs	r3, #128	@ 0x80
 800073e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000740:	2301      	movs	r3, #1
 8000742:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000748:	2300      	movs	r3, #0
 800074a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	4619      	mov	r1, r3
 8000752:	4814      	ldr	r0, [pc, #80]	@ (80007a4 <MX_GPIO_Init+0x184>)
 8000754:	f000 ff0e 	bl	8001574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000758:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 800075c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075e:	2301      	movs	r3, #1
 8000760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	2300      	movs	r3, #0
 8000768:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4619      	mov	r1, r3
 8000770:	480d      	ldr	r0, [pc, #52]	@ (80007a8 <MX_GPIO_Init+0x188>)
 8000772:	f000 feff 	bl	8001574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000776:	2303      	movs	r3, #3
 8000778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	2301      	movs	r3, #1
 800077c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2300      	movs	r3, #0
 8000784:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	4619      	mov	r1, r3
 800078c:	4807      	ldr	r0, [pc, #28]	@ (80007ac <MX_GPIO_Init+0x18c>)
 800078e:	f000 fef1 	bl	8001574 <HAL_GPIO_Init>

}
 8000792:	bf00      	nop
 8000794:	3728      	adds	r7, #40	@ 0x28
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020000 	.word	0x40020000
 80007a4:	40020c00 	.word	0x40020c00
 80007a8:	40020400 	.word	0x40020400
 80007ac:	40021000 	.word	0x40021000

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b4:	f000 faf0 	bl	8000d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b8:	f000 f822 	bl	8000800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007bc:	f7ff ff30 	bl	8000620 <MX_GPIO_Init>
  MX_ADC1_Init();
 80007c0:	f7ff fe98 	bl	80004f4 <MX_ADC1_Init>
  MX_SPI1_Init();
 80007c4:	f000 f882 	bl	80008cc <MX_SPI1_Init>
  MX_UART5_Init();
 80007c8:	f000 f968 	bl	8000a9c <MX_UART5_Init>
  MX_USART1_UART_Init();
 80007cc:	f000 f990 	bl	8000af0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80007d0:	f000 f9b8 	bl	8000b44 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	/* Toggle PA2 ON */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);  // Set PA2 high
 80007d4:	2201      	movs	r2, #1
 80007d6:	2104      	movs	r1, #4
 80007d8:	4808      	ldr	r0, [pc, #32]	@ (80007fc <main+0x4c>)
 80007da:	f001 f85f 	bl	800189c <HAL_GPIO_WritePin>
	HAL_Delay(500);                                     // 500ms delay
 80007de:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007e2:	f000 fb4b 	bl	8000e7c <HAL_Delay>

	/* Toggle PA2 OFF */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); // Set PA2 low
 80007e6:	2200      	movs	r2, #0
 80007e8:	2104      	movs	r1, #4
 80007ea:	4804      	ldr	r0, [pc, #16]	@ (80007fc <main+0x4c>)
 80007ec:	f001 f856 	bl	800189c <HAL_GPIO_WritePin>
	HAL_Delay(500);                                      // 500ms delay
 80007f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007f4:	f000 fb42 	bl	8000e7c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);  // Set PA2 high
 80007f8:	bf00      	nop
 80007fa:	e7eb      	b.n	80007d4 <main+0x24>
 80007fc:	40020000 	.word	0x40020000

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b094      	sub	sp, #80	@ 0x50
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	2234      	movs	r2, #52	@ 0x34
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f002 f90e 	bl	8002a30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	f107 0308 	add.w	r3, r7, #8
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000824:	2300      	movs	r3, #0
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	4b23      	ldr	r3, [pc, #140]	@ (80008b8 <SystemClock_Config+0xb8>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082c:	4a22      	ldr	r2, [pc, #136]	@ (80008b8 <SystemClock_Config+0xb8>)
 800082e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000832:	6413      	str	r3, [r2, #64]	@ 0x40
 8000834:	4b20      	ldr	r3, [pc, #128]	@ (80008b8 <SystemClock_Config+0xb8>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000838:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000840:	2300      	movs	r3, #0
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	4b1d      	ldr	r3, [pc, #116]	@ (80008bc <SystemClock_Config+0xbc>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800084c:	4a1b      	ldr	r2, [pc, #108]	@ (80008bc <SystemClock_Config+0xbc>)
 800084e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000852:	6013      	str	r3, [r2, #0]
 8000854:	4b19      	ldr	r3, [pc, #100]	@ (80008bc <SystemClock_Config+0xbc>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000860:	2302      	movs	r3, #2
 8000862:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000864:	2301      	movs	r3, #1
 8000866:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000868:	2310      	movs	r3, #16
 800086a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800086c:	2300      	movs	r3, #0
 800086e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4618      	mov	r0, r3
 8000876:	f001 faef 	bl	8001e58 <HAL_RCC_OscConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000880:	f000 f81e 	bl	80008c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000884:	230f      	movs	r3, #15
 8000886:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000898:	f107 0308 	add.w	r3, r7, #8
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f001 f816 	bl	80018d0 <HAL_RCC_ClockConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008aa:	f000 f809 	bl	80008c0 <Error_Handler>
  }
}
 80008ae:	bf00      	nop
 80008b0:	3750      	adds	r7, #80	@ 0x50
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40007000 	.word	0x40007000

080008c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c4:	b672      	cpsid	i
}
 80008c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <Error_Handler+0x8>

080008cc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80008d0:	4b17      	ldr	r3, [pc, #92]	@ (8000930 <MX_SPI1_Init+0x64>)
 80008d2:	4a18      	ldr	r2, [pc, #96]	@ (8000934 <MX_SPI1_Init+0x68>)
 80008d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008d6:	4b16      	ldr	r3, [pc, #88]	@ (8000930 <MX_SPI1_Init+0x64>)
 80008d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008de:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <MX_SPI1_Init+0x64>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008e4:	4b12      	ldr	r3, [pc, #72]	@ (8000930 <MX_SPI1_Init+0x64>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ea:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <MX_SPI1_Init+0x64>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000930 <MX_SPI1_Init+0x64>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <MX_SPI1_Init+0x64>)
 80008f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <MX_SPI1_Init+0x64>)
 8000900:	2200      	movs	r2, #0
 8000902:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000904:	4b0a      	ldr	r3, [pc, #40]	@ (8000930 <MX_SPI1_Init+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800090a:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <MX_SPI1_Init+0x64>)
 800090c:	2200      	movs	r2, #0
 800090e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000910:	4b07      	ldr	r3, [pc, #28]	@ (8000930 <MX_SPI1_Init+0x64>)
 8000912:	2200      	movs	r2, #0
 8000914:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000916:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <MX_SPI1_Init+0x64>)
 8000918:	220a      	movs	r2, #10
 800091a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800091c:	4804      	ldr	r0, [pc, #16]	@ (8000930 <MX_SPI1_Init+0x64>)
 800091e:	f001 fd39 	bl	8002394 <HAL_SPI_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000928:	f7ff ffca 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000070 	.word	0x20000070
 8000934:	40013000 	.word	0x40013000

08000938 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	@ 0x28
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a19      	ldr	r2, [pc, #100]	@ (80009bc <HAL_SPI_MspInit+0x84>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d12b      	bne.n	80009b2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	4b18      	ldr	r3, [pc, #96]	@ (80009c0 <HAL_SPI_MspInit+0x88>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000962:	4a17      	ldr	r2, [pc, #92]	@ (80009c0 <HAL_SPI_MspInit+0x88>)
 8000964:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000968:	6453      	str	r3, [r2, #68]	@ 0x44
 800096a:	4b15      	ldr	r3, [pc, #84]	@ (80009c0 <HAL_SPI_MspInit+0x88>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800096e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <HAL_SPI_MspInit+0x88>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	4a10      	ldr	r2, [pc, #64]	@ (80009c0 <HAL_SPI_MspInit+0x88>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6313      	str	r3, [r2, #48]	@ 0x30
 8000986:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <HAL_SPI_MspInit+0x88>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000992:	23e0      	movs	r3, #224	@ 0xe0
 8000994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099e:	2303      	movs	r3, #3
 80009a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009a2:	2305      	movs	r3, #5
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	4619      	mov	r1, r3
 80009ac:	4805      	ldr	r0, [pc, #20]	@ (80009c4 <HAL_SPI_MspInit+0x8c>)
 80009ae:	f000 fde1 	bl	8001574 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80009b2:	bf00      	nop
 80009b4:	3728      	adds	r7, #40	@ 0x28
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40013000 	.word	0x40013000
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40020000 	.word	0x40020000

080009c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	4b10      	ldr	r3, [pc, #64]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d6:	4a0f      	ldr	r2, [pc, #60]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009de:	4b0d      	ldr	r3, [pc, #52]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	603b      	str	r3, [r7, #0]
 80009ee:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f2:	4a08      	ldr	r2, [pc, #32]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009fa:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800

08000a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <NMI_Handler+0x4>

08000a20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <HardFault_Handler+0x4>

08000a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <MemManage_Handler+0x4>

08000a30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <BusFault_Handler+0x4>

08000a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <UsageFault_Handler+0x4>

08000a40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a6e:	f000 f9e5 	bl	8000e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a7c:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <SystemInit+0x20>)
 8000a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a82:	4a05      	ldr	r2, [pc, #20]	@ (8000a98 <SystemInit+0x20>)
 8000a84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <MX_UART5_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <MX_UART5_Init+0x4c>)
 8000aa2:	4a12      	ldr	r2, [pc, #72]	@ (8000aec <MX_UART5_Init+0x50>)
 8000aa4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000aa6:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <MX_UART5_Init+0x4c>)
 8000aa8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000aac:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <MX_UART5_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <MX_UART5_Init+0x4c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae8 <MX_UART5_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000ac0:	4b09      	ldr	r3, [pc, #36]	@ (8000ae8 <MX_UART5_Init+0x4c>)
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <MX_UART5_Init+0x4c>)
 8000ac8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000acc:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ace:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <MX_UART5_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000ad4:	4804      	ldr	r0, [pc, #16]	@ (8000ae8 <MX_UART5_Init+0x4c>)
 8000ad6:	f001 fce6 	bl	80024a6 <HAL_UART_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_UART5_Init+0x48>
  {
    Error_Handler();
 8000ae0:	f7ff feee 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	200000c8 	.word	0x200000c8
 8000aec:	40005000 	.word	0x40005000

08000af0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000af4:	4b11      	ldr	r3, [pc, #68]	@ (8000b3c <MX_USART1_UART_Init+0x4c>)
 8000af6:	4a12      	ldr	r2, [pc, #72]	@ (8000b40 <MX_USART1_UART_Init+0x50>)
 8000af8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000afa:	4b10      	ldr	r3, [pc, #64]	@ (8000b3c <MX_USART1_UART_Init+0x4c>)
 8000afc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	@ (8000b3c <MX_USART1_UART_Init+0x4c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b08:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <MX_USART1_UART_Init+0x4c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b3c <MX_USART1_UART_Init+0x4c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b14:	4b09      	ldr	r3, [pc, #36]	@ (8000b3c <MX_USART1_UART_Init+0x4c>)
 8000b16:	220c      	movs	r2, #12
 8000b18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000b1a:	4b08      	ldr	r3, [pc, #32]	@ (8000b3c <MX_USART1_UART_Init+0x4c>)
 8000b1c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000b20:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b22:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <MX_USART1_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b28:	4804      	ldr	r0, [pc, #16]	@ (8000b3c <MX_USART1_UART_Init+0x4c>)
 8000b2a:	f001 fcbc 	bl	80024a6 <HAL_UART_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8000b34:	f7ff fec4 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000110 	.word	0x20000110
 8000b40:	40011000 	.word	0x40011000

08000b44 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b48:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <MX_USART2_UART_Init+0x4c>)
 8000b4a:	4a12      	ldr	r2, [pc, #72]	@ (8000b94 <MX_USART2_UART_Init+0x50>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b4e:	4b10      	ldr	r3, [pc, #64]	@ (8000b90 <MX_USART2_UART_Init+0x4c>)
 8000b50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <MX_USART2_UART_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <MX_USART2_UART_Init+0x4c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	@ (8000b90 <MX_USART2_UART_Init+0x4c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b68:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <MX_USART2_UART_Init+0x4c>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <MX_USART2_UART_Init+0x4c>)
 8000b70:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000b74:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <MX_USART2_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b7c:	4804      	ldr	r0, [pc, #16]	@ (8000b90 <MX_USART2_UART_Init+0x4c>)
 8000b7e:	f001 fc92 	bl	80024a6 <HAL_UART_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8000b88:	f7ff fe9a 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000158 	.word	0x20000158
 8000b94:	40004400 	.word	0x40004400

08000b98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08e      	sub	sp, #56	@ 0x38
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a5b      	ldr	r2, [pc, #364]	@ (8000d24 <HAL_UART_MspInit+0x18c>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d14c      	bne.n	8000c54 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	623b      	str	r3, [r7, #32]
 8000bbe:	4b5a      	ldr	r3, [pc, #360]	@ (8000d28 <HAL_UART_MspInit+0x190>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc2:	4a59      	ldr	r2, [pc, #356]	@ (8000d28 <HAL_UART_MspInit+0x190>)
 8000bc4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000bc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bca:	4b57      	ldr	r3, [pc, #348]	@ (8000d28 <HAL_UART_MspInit+0x190>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bd2:	623b      	str	r3, [r7, #32]
 8000bd4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
 8000bda:	4b53      	ldr	r3, [pc, #332]	@ (8000d28 <HAL_UART_MspInit+0x190>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	4a52      	ldr	r2, [pc, #328]	@ (8000d28 <HAL_UART_MspInit+0x190>)
 8000be0:	f043 0310 	orr.w	r3, r3, #16
 8000be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be6:	4b50      	ldr	r3, [pc, #320]	@ (8000d28 <HAL_UART_MspInit+0x190>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	f003 0310 	and.w	r3, r3, #16
 8000bee:	61fb      	str	r3, [r7, #28]
 8000bf0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61bb      	str	r3, [r7, #24]
 8000bf6:	4b4c      	ldr	r3, [pc, #304]	@ (8000d28 <HAL_UART_MspInit+0x190>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	4a4b      	ldr	r2, [pc, #300]	@ (8000d28 <HAL_UART_MspInit+0x190>)
 8000bfc:	f043 0304 	orr.w	r3, r3, #4
 8000c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c02:	4b49      	ldr	r3, [pc, #292]	@ (8000d28 <HAL_UART_MspInit+0x190>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	f003 0304 	and.w	r3, r3, #4
 8000c0a:	61bb      	str	r3, [r7, #24]
 8000c0c:	69bb      	ldr	r3, [r7, #24]
    PE7     ------> UART5_RX
    PE8     ------> UART5_TX
    PC8     ------> UART5_RTS
    PC9     ------> UART5_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000c0e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000c12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c20:	2308      	movs	r3, #8
 8000c22:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4840      	ldr	r0, [pc, #256]	@ (8000d2c <HAL_UART_MspInit+0x194>)
 8000c2c:	f000 fca2 	bl	8001574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c30:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_UART5;
 8000c42:	2307      	movs	r3, #7
 8000c44:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4838      	ldr	r0, [pc, #224]	@ (8000d30 <HAL_UART_MspInit+0x198>)
 8000c4e:	f000 fc91 	bl	8001574 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c52:	e063      	b.n	8000d1c <HAL_UART_MspInit+0x184>
  else if(uartHandle->Instance==USART1)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a36      	ldr	r2, [pc, #216]	@ (8000d34 <HAL_UART_MspInit+0x19c>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d12d      	bne.n	8000cba <HAL_UART_MspInit+0x122>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	4b31      	ldr	r3, [pc, #196]	@ (8000d28 <HAL_UART_MspInit+0x190>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c66:	4a30      	ldr	r2, [pc, #192]	@ (8000d28 <HAL_UART_MspInit+0x190>)
 8000c68:	f043 0310 	orr.w	r3, r3, #16
 8000c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c6e:	4b2e      	ldr	r3, [pc, #184]	@ (8000d28 <HAL_UART_MspInit+0x190>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c72:	f003 0310 	and.w	r3, r3, #16
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000d28 <HAL_UART_MspInit+0x190>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	4a29      	ldr	r2, [pc, #164]	@ (8000d28 <HAL_UART_MspInit+0x190>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8a:	4b27      	ldr	r3, [pc, #156]	@ (8000d28 <HAL_UART_MspInit+0x190>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000c96:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8000c9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ca8:	2307      	movs	r3, #7
 8000caa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4821      	ldr	r0, [pc, #132]	@ (8000d38 <HAL_UART_MspInit+0x1a0>)
 8000cb4:	f000 fc5e 	bl	8001574 <HAL_GPIO_Init>
}
 8000cb8:	e030      	b.n	8000d1c <HAL_UART_MspInit+0x184>
  else if(uartHandle->Instance==USART2)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8000d3c <HAL_UART_MspInit+0x1a4>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d12b      	bne.n	8000d1c <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	4b17      	ldr	r3, [pc, #92]	@ (8000d28 <HAL_UART_MspInit+0x190>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ccc:	4a16      	ldr	r2, [pc, #88]	@ (8000d28 <HAL_UART_MspInit+0x190>)
 8000cce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cd4:	4b14      	ldr	r3, [pc, #80]	@ (8000d28 <HAL_UART_MspInit+0x190>)
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	4b10      	ldr	r3, [pc, #64]	@ (8000d28 <HAL_UART_MspInit+0x190>)
 8000ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce8:	4a0f      	ldr	r2, [pc, #60]	@ (8000d28 <HAL_UART_MspInit+0x190>)
 8000cea:	f043 0308 	orr.w	r3, r3, #8
 8000cee:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf0:	4b0d      	ldr	r3, [pc, #52]	@ (8000d28 <HAL_UART_MspInit+0x190>)
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf4:	f003 0308 	and.w	r3, r3, #8
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000cfc:	2378      	movs	r3, #120	@ 0x78
 8000cfe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d0c:	2307      	movs	r3, #7
 8000d0e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d14:	4619      	mov	r1, r3
 8000d16:	480a      	ldr	r0, [pc, #40]	@ (8000d40 <HAL_UART_MspInit+0x1a8>)
 8000d18:	f000 fc2c 	bl	8001574 <HAL_GPIO_Init>
}
 8000d1c:	bf00      	nop
 8000d1e:	3738      	adds	r7, #56	@ 0x38
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40005000 	.word	0x40005000
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	40020800 	.word	0x40020800
 8000d34:	40011000 	.word	0x40011000
 8000d38:	40020000 	.word	0x40020000
 8000d3c:	40004400 	.word	0x40004400
 8000d40:	40020c00 	.word	0x40020c00

08000d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d48:	f7ff fe96 	bl	8000a78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d4c:	480c      	ldr	r0, [pc, #48]	@ (8000d80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d4e:	490d      	ldr	r1, [pc, #52]	@ (8000d84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d50:	4a0d      	ldr	r2, [pc, #52]	@ (8000d88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d54:	e002      	b.n	8000d5c <LoopCopyDataInit>

08000d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5a:	3304      	adds	r3, #4

08000d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d60:	d3f9      	bcc.n	8000d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d62:	4a0a      	ldr	r2, [pc, #40]	@ (8000d8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d64:	4c0a      	ldr	r4, [pc, #40]	@ (8000d90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d68:	e001      	b.n	8000d6e <LoopFillZerobss>

08000d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d6c:	3204      	adds	r2, #4

08000d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d70:	d3fb      	bcc.n	8000d6a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d72:	f001 fe65 	bl	8002a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d76:	f7ff fd1b 	bl	80007b0 <main>
  bx  lr    
 8000d7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d84:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d88:	08002ac8 	.word	0x08002ac8
  ldr r2, =_sbss
 8000d8c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d90:	200001a4 	.word	0x200001a4

08000d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d94:	e7fe      	b.n	8000d94 <ADC_IRQHandler>
	...

08000d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd8 <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd8 <HAL_Init+0x40>)
 8000da2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000da8:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd8 <HAL_Init+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd8 <HAL_Init+0x40>)
 8000dae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000db2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db4:	4b08      	ldr	r3, [pc, #32]	@ (8000dd8 <HAL_Init+0x40>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a07      	ldr	r2, [pc, #28]	@ (8000dd8 <HAL_Init+0x40>)
 8000dba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc0:	2003      	movs	r0, #3
 8000dc2:	f000 fba3 	bl	800150c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc6:	200f      	movs	r0, #15
 8000dc8:	f000 f808 	bl	8000ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dcc:	f7ff fdfc 	bl	80009c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40023c00 	.word	0x40023c00

08000ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de4:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <HAL_InitTick+0x54>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b12      	ldr	r3, [pc, #72]	@ (8000e34 <HAL_InitTick+0x58>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4619      	mov	r1, r3
 8000dee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 fbad 	bl	800155a <HAL_SYSTICK_Config>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e00e      	b.n	8000e28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2b0f      	cmp	r3, #15
 8000e0e:	d80a      	bhi.n	8000e26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e10:	2200      	movs	r2, #0
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295
 8000e18:	f000 fb83 	bl	8001522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e1c:	4a06      	ldr	r2, [pc, #24]	@ (8000e38 <HAL_InitTick+0x5c>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	e000      	b.n	8000e28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000000 	.word	0x20000000
 8000e34:	20000008 	.word	0x20000008
 8000e38:	20000004 	.word	0x20000004

08000e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e40:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <HAL_IncTick+0x20>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <HAL_IncTick+0x24>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	4a04      	ldr	r2, [pc, #16]	@ (8000e60 <HAL_IncTick+0x24>)
 8000e4e:	6013      	str	r3, [r2, #0]
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000008 	.word	0x20000008
 8000e60:	200001a0 	.word	0x200001a0

08000e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return uwTick;
 8000e68:	4b03      	ldr	r3, [pc, #12]	@ (8000e78 <HAL_GetTick+0x14>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	200001a0 	.word	0x200001a0

08000e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e84:	f7ff ffee 	bl	8000e64 <HAL_GetTick>
 8000e88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e94:	d005      	beq.n	8000ea2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e96:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec0 <HAL_Delay+0x44>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ea2:	bf00      	nop
 8000ea4:	f7ff ffde 	bl	8000e64 <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d8f7      	bhi.n	8000ea4 <HAL_Delay+0x28>
  {
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000008 	.word	0x20000008

08000ec4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d101      	bne.n	8000eda <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e033      	b.n	8000f42 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d109      	bne.n	8000ef6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff fb58 	bl	8000598 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efa:	f003 0310 	and.w	r3, r3, #16
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d118      	bne.n	8000f34 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f06:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000f0a:	f023 0302 	bic.w	r3, r3, #2
 8000f0e:	f043 0202 	orr.w	r2, r3, #2
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f000 f94a 	bl	80011b0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f26:	f023 0303 	bic.w	r3, r3, #3
 8000f2a:	f043 0201 	orr.w	r2, r3, #1
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f32:	e001      	b.n	8000f38 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d101      	bne.n	8000f68 <HAL_ADC_ConfigChannel+0x1c>
 8000f64:	2302      	movs	r3, #2
 8000f66:	e113      	b.n	8001190 <HAL_ADC_ConfigChannel+0x244>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b09      	cmp	r3, #9
 8000f76:	d925      	bls.n	8000fc4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	68d9      	ldr	r1, [r3, #12]
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	461a      	mov	r2, r3
 8000f86:	4613      	mov	r3, r2
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	4413      	add	r3, r2
 8000f8c:	3b1e      	subs	r3, #30
 8000f8e:	2207      	movs	r2, #7
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43da      	mvns	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	400a      	ands	r2, r1
 8000f9c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	68d9      	ldr	r1, [r3, #12]
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	689a      	ldr	r2, [r3, #8]
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	4618      	mov	r0, r3
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	4403      	add	r3, r0
 8000fb6:	3b1e      	subs	r3, #30
 8000fb8:	409a      	lsls	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	e022      	b.n	800100a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	6919      	ldr	r1, [r3, #16]
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	4413      	add	r3, r2
 8000fd8:	2207      	movs	r2, #7
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43da      	mvns	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	400a      	ands	r2, r1
 8000fe6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	6919      	ldr	r1, [r3, #16]
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	689a      	ldr	r2, [r3, #8]
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	4403      	add	r3, r0
 8001000:	409a      	lsls	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	430a      	orrs	r2, r1
 8001008:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	2b06      	cmp	r3, #6
 8001010:	d824      	bhi.n	800105c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685a      	ldr	r2, [r3, #4]
 800101c:	4613      	mov	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	3b05      	subs	r3, #5
 8001024:	221f      	movs	r2, #31
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43da      	mvns	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	400a      	ands	r2, r1
 8001032:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	b29b      	uxth	r3, r3
 8001040:	4618      	mov	r0, r3
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	4613      	mov	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	3b05      	subs	r3, #5
 800104e:	fa00 f203 	lsl.w	r2, r0, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	430a      	orrs	r2, r1
 8001058:	635a      	str	r2, [r3, #52]	@ 0x34
 800105a:	e04c      	b.n	80010f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b0c      	cmp	r3, #12
 8001062:	d824      	bhi.n	80010ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	3b23      	subs	r3, #35	@ 0x23
 8001076:	221f      	movs	r2, #31
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43da      	mvns	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	400a      	ands	r2, r1
 8001084:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	b29b      	uxth	r3, r3
 8001092:	4618      	mov	r0, r3
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	4613      	mov	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4413      	add	r3, r2
 800109e:	3b23      	subs	r3, #35	@ 0x23
 80010a0:	fa00 f203 	lsl.w	r2, r0, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	430a      	orrs	r2, r1
 80010aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80010ac:	e023      	b.n	80010f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	3b41      	subs	r3, #65	@ 0x41
 80010c0:	221f      	movs	r2, #31
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43da      	mvns	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	400a      	ands	r2, r1
 80010ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	b29b      	uxth	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	4613      	mov	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4413      	add	r3, r2
 80010e8:	3b41      	subs	r3, #65	@ 0x41
 80010ea:	fa00 f203 	lsl.w	r2, r0, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	430a      	orrs	r2, r1
 80010f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010f6:	4b29      	ldr	r3, [pc, #164]	@ (800119c <HAL_ADC_ConfigChannel+0x250>)
 80010f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a28      	ldr	r2, [pc, #160]	@ (80011a0 <HAL_ADC_ConfigChannel+0x254>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d10f      	bne.n	8001124 <HAL_ADC_ConfigChannel+0x1d8>
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b12      	cmp	r3, #18
 800110a:	d10b      	bne.n	8001124 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a1d      	ldr	r2, [pc, #116]	@ (80011a0 <HAL_ADC_ConfigChannel+0x254>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d12b      	bne.n	8001186 <HAL_ADC_ConfigChannel+0x23a>
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a1c      	ldr	r2, [pc, #112]	@ (80011a4 <HAL_ADC_ConfigChannel+0x258>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d003      	beq.n	8001140 <HAL_ADC_ConfigChannel+0x1f4>
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b11      	cmp	r3, #17
 800113e:	d122      	bne.n	8001186 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a11      	ldr	r2, [pc, #68]	@ (80011a4 <HAL_ADC_ConfigChannel+0x258>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d111      	bne.n	8001186 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001162:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <HAL_ADC_ConfigChannel+0x25c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a11      	ldr	r2, [pc, #68]	@ (80011ac <HAL_ADC_ConfigChannel+0x260>)
 8001168:	fba2 2303 	umull	r2, r3, r2, r3
 800116c:	0c9a      	lsrs	r2, r3, #18
 800116e:	4613      	mov	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4413      	add	r3, r2
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001178:	e002      	b.n	8001180 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	3b01      	subs	r3, #1
 800117e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1f9      	bne.n	800117a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	40012300 	.word	0x40012300
 80011a0:	40012000 	.word	0x40012000
 80011a4:	10000012 	.word	0x10000012
 80011a8:	20000000 	.word	0x20000000
 80011ac:	431bde83 	.word	0x431bde83

080011b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011b8:	4b79      	ldr	r3, [pc, #484]	@ (80013a0 <ADC_Init+0x1f0>)
 80011ba:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	685a      	ldr	r2, [r3, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	431a      	orrs	r2, r3
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80011e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	6859      	ldr	r1, [r3, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	021a      	lsls	r2, r3, #8
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	430a      	orrs	r2, r1
 80011f8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001208:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6859      	ldr	r1, [r3, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	430a      	orrs	r2, r1
 800121a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	689a      	ldr	r2, [r3, #8]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800122a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6899      	ldr	r1, [r3, #8]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68da      	ldr	r2, [r3, #12]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	430a      	orrs	r2, r1
 800123c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001242:	4a58      	ldr	r2, [pc, #352]	@ (80013a4 <ADC_Init+0x1f4>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d022      	beq.n	800128e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001256:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6899      	ldr	r1, [r3, #8]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	430a      	orrs	r2, r1
 8001268:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001278:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6899      	ldr	r1, [r3, #8]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	430a      	orrs	r2, r1
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	e00f      	b.n	80012ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800129c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80012ac:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0202 	bic.w	r2, r2, #2
 80012bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6899      	ldr	r1, [r3, #8]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	7e1b      	ldrb	r3, [r3, #24]
 80012c8:	005a      	lsls	r2, r3, #1
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	430a      	orrs	r2, r1
 80012d0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d01b      	beq.n	8001314 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80012ea:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80012fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6859      	ldr	r1, [r3, #4]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001306:	3b01      	subs	r3, #1
 8001308:	035a      	lsls	r2, r3, #13
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	430a      	orrs	r2, r1
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	e007      	b.n	8001324 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001322:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001332:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	3b01      	subs	r3, #1
 8001340:	051a      	lsls	r2, r3, #20
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	430a      	orrs	r2, r1
 8001348:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001358:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6899      	ldr	r1, [r3, #8]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001366:	025a      	lsls	r2, r3, #9
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	430a      	orrs	r2, r1
 800136e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689a      	ldr	r2, [r3, #8]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800137e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6899      	ldr	r1, [r3, #8]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	029a      	lsls	r2, r3, #10
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	430a      	orrs	r2, r1
 8001392:	609a      	str	r2, [r3, #8]
}
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	40012300 	.word	0x40012300
 80013a4:	0f000001 	.word	0x0f000001

080013a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b8:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013c4:	4013      	ands	r3, r2
 80013c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013da:	4a04      	ldr	r2, [pc, #16]	@ (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	60d3      	str	r3, [r2, #12]
}
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f4:	4b04      	ldr	r3, [pc, #16]	@ (8001408 <__NVIC_GetPriorityGrouping+0x18>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	0a1b      	lsrs	r3, r3, #8
 80013fa:	f003 0307 	and.w	r3, r3, #7
}
 80013fe:	4618      	mov	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	6039      	str	r1, [r7, #0]
 8001416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141c:	2b00      	cmp	r3, #0
 800141e:	db0a      	blt.n	8001436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	b2da      	uxtb	r2, r3
 8001424:	490c      	ldr	r1, [pc, #48]	@ (8001458 <__NVIC_SetPriority+0x4c>)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	0112      	lsls	r2, r2, #4
 800142c:	b2d2      	uxtb	r2, r2
 800142e:	440b      	add	r3, r1
 8001430:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001434:	e00a      	b.n	800144c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4908      	ldr	r1, [pc, #32]	@ (800145c <__NVIC_SetPriority+0x50>)
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	f003 030f 	and.w	r3, r3, #15
 8001442:	3b04      	subs	r3, #4
 8001444:	0112      	lsls	r2, r2, #4
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	440b      	add	r3, r1
 800144a:	761a      	strb	r2, [r3, #24]
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000e100 	.word	0xe000e100
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001460:	b480      	push	{r7}
 8001462:	b089      	sub	sp, #36	@ 0x24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f1c3 0307 	rsb	r3, r3, #7
 800147a:	2b04      	cmp	r3, #4
 800147c:	bf28      	it	cs
 800147e:	2304      	movcs	r3, #4
 8001480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3304      	adds	r3, #4
 8001486:	2b06      	cmp	r3, #6
 8001488:	d902      	bls.n	8001490 <NVIC_EncodePriority+0x30>
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3b03      	subs	r3, #3
 800148e:	e000      	b.n	8001492 <NVIC_EncodePriority+0x32>
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	f04f 32ff 	mov.w	r2, #4294967295
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43da      	mvns	r2, r3
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	401a      	ands	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	fa01 f303 	lsl.w	r3, r1, r3
 80014b2:	43d9      	mvns	r1, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	4313      	orrs	r3, r2
         );
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3724      	adds	r7, #36	@ 0x24
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014d8:	d301      	bcc.n	80014de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014da:	2301      	movs	r3, #1
 80014dc:	e00f      	b.n	80014fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014de:	4a0a      	ldr	r2, [pc, #40]	@ (8001508 <SysTick_Config+0x40>)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e6:	210f      	movs	r1, #15
 80014e8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ec:	f7ff ff8e 	bl	800140c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f0:	4b05      	ldr	r3, [pc, #20]	@ (8001508 <SysTick_Config+0x40>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f6:	4b04      	ldr	r3, [pc, #16]	@ (8001508 <SysTick_Config+0x40>)
 80014f8:	2207      	movs	r2, #7
 80014fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	e000e010 	.word	0xe000e010

0800150c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff ff47 	bl	80013a8 <__NVIC_SetPriorityGrouping>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001522:	b580      	push	{r7, lr}
 8001524:	b086      	sub	sp, #24
 8001526:	af00      	add	r7, sp, #0
 8001528:	4603      	mov	r3, r0
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001534:	f7ff ff5c 	bl	80013f0 <__NVIC_GetPriorityGrouping>
 8001538:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	68b9      	ldr	r1, [r7, #8]
 800153e:	6978      	ldr	r0, [r7, #20]
 8001540:	f7ff ff8e 	bl	8001460 <NVIC_EncodePriority>
 8001544:	4602      	mov	r2, r0
 8001546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154a:	4611      	mov	r1, r2
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff5d 	bl	800140c <__NVIC_SetPriority>
}
 8001552:	bf00      	nop
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff ffb0 	bl	80014c8 <SysTick_Config>
 8001568:	4603      	mov	r3, r0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001574:	b480      	push	{r7}
 8001576:	b089      	sub	sp, #36	@ 0x24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001586:	2300      	movs	r3, #0
 8001588:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
 800158e:	e165      	b.n	800185c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001590:	2201      	movs	r2, #1
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	697a      	ldr	r2, [r7, #20]
 80015a0:	4013      	ands	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	f040 8154 	bne.w	8001856 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 0303 	and.w	r3, r3, #3
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d005      	beq.n	80015c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d130      	bne.n	8001628 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	2203      	movs	r2, #3
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	68da      	ldr	r2, [r3, #12]
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015fc:	2201      	movs	r2, #1
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	091b      	lsrs	r3, r3, #4
 8001612:	f003 0201 	and.w	r2, r3, #1
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	2b03      	cmp	r3, #3
 8001632:	d017      	beq.n	8001664 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	2203      	movs	r2, #3
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d123      	bne.n	80016b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	08da      	lsrs	r2, r3, #3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3208      	adds	r2, #8
 8001678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800167c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	220f      	movs	r2, #15
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	691a      	ldr	r2, [r3, #16]
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	08da      	lsrs	r2, r3, #3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	3208      	adds	r2, #8
 80016b2:	69b9      	ldr	r1, [r7, #24]
 80016b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	2203      	movs	r2, #3
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0203 	and.w	r2, r3, #3
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 80ae 	beq.w	8001856 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	4b5d      	ldr	r3, [pc, #372]	@ (8001874 <HAL_GPIO_Init+0x300>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001702:	4a5c      	ldr	r2, [pc, #368]	@ (8001874 <HAL_GPIO_Init+0x300>)
 8001704:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001708:	6453      	str	r3, [r2, #68]	@ 0x44
 800170a:	4b5a      	ldr	r3, [pc, #360]	@ (8001874 <HAL_GPIO_Init+0x300>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001716:	4a58      	ldr	r2, [pc, #352]	@ (8001878 <HAL_GPIO_Init+0x304>)
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	089b      	lsrs	r3, r3, #2
 800171c:	3302      	adds	r3, #2
 800171e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	220f      	movs	r2, #15
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4013      	ands	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a4f      	ldr	r2, [pc, #316]	@ (800187c <HAL_GPIO_Init+0x308>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d025      	beq.n	800178e <HAL_GPIO_Init+0x21a>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a4e      	ldr	r2, [pc, #312]	@ (8001880 <HAL_GPIO_Init+0x30c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d01f      	beq.n	800178a <HAL_GPIO_Init+0x216>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a4d      	ldr	r2, [pc, #308]	@ (8001884 <HAL_GPIO_Init+0x310>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d019      	beq.n	8001786 <HAL_GPIO_Init+0x212>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a4c      	ldr	r2, [pc, #304]	@ (8001888 <HAL_GPIO_Init+0x314>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d013      	beq.n	8001782 <HAL_GPIO_Init+0x20e>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a4b      	ldr	r2, [pc, #300]	@ (800188c <HAL_GPIO_Init+0x318>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d00d      	beq.n	800177e <HAL_GPIO_Init+0x20a>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a4a      	ldr	r2, [pc, #296]	@ (8001890 <HAL_GPIO_Init+0x31c>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d007      	beq.n	800177a <HAL_GPIO_Init+0x206>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a49      	ldr	r2, [pc, #292]	@ (8001894 <HAL_GPIO_Init+0x320>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d101      	bne.n	8001776 <HAL_GPIO_Init+0x202>
 8001772:	2306      	movs	r3, #6
 8001774:	e00c      	b.n	8001790 <HAL_GPIO_Init+0x21c>
 8001776:	2307      	movs	r3, #7
 8001778:	e00a      	b.n	8001790 <HAL_GPIO_Init+0x21c>
 800177a:	2305      	movs	r3, #5
 800177c:	e008      	b.n	8001790 <HAL_GPIO_Init+0x21c>
 800177e:	2304      	movs	r3, #4
 8001780:	e006      	b.n	8001790 <HAL_GPIO_Init+0x21c>
 8001782:	2303      	movs	r3, #3
 8001784:	e004      	b.n	8001790 <HAL_GPIO_Init+0x21c>
 8001786:	2302      	movs	r3, #2
 8001788:	e002      	b.n	8001790 <HAL_GPIO_Init+0x21c>
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <HAL_GPIO_Init+0x21c>
 800178e:	2300      	movs	r3, #0
 8001790:	69fa      	ldr	r2, [r7, #28]
 8001792:	f002 0203 	and.w	r2, r2, #3
 8001796:	0092      	lsls	r2, r2, #2
 8001798:	4093      	lsls	r3, r2
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017a0:	4935      	ldr	r1, [pc, #212]	@ (8001878 <HAL_GPIO_Init+0x304>)
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	089b      	lsrs	r3, r3, #2
 80017a6:	3302      	adds	r3, #2
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001898 <HAL_GPIO_Init+0x324>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	43db      	mvns	r3, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4013      	ands	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017d2:	4a31      	ldr	r2, [pc, #196]	@ (8001898 <HAL_GPIO_Init+0x324>)
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001898 <HAL_GPIO_Init+0x324>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017fc:	4a26      	ldr	r2, [pc, #152]	@ (8001898 <HAL_GPIO_Init+0x324>)
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001802:	4b25      	ldr	r3, [pc, #148]	@ (8001898 <HAL_GPIO_Init+0x324>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	4313      	orrs	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001826:	4a1c      	ldr	r2, [pc, #112]	@ (8001898 <HAL_GPIO_Init+0x324>)
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800182c:	4b1a      	ldr	r3, [pc, #104]	@ (8001898 <HAL_GPIO_Init+0x324>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001850:	4a11      	ldr	r2, [pc, #68]	@ (8001898 <HAL_GPIO_Init+0x324>)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3301      	adds	r3, #1
 800185a:	61fb      	str	r3, [r7, #28]
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	2b0f      	cmp	r3, #15
 8001860:	f67f ae96 	bls.w	8001590 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001864:	bf00      	nop
 8001866:	bf00      	nop
 8001868:	3724      	adds	r7, #36	@ 0x24
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40023800 	.word	0x40023800
 8001878:	40013800 	.word	0x40013800
 800187c:	40020000 	.word	0x40020000
 8001880:	40020400 	.word	0x40020400
 8001884:	40020800 	.word	0x40020800
 8001888:	40020c00 	.word	0x40020c00
 800188c:	40021000 	.word	0x40021000
 8001890:	40021400 	.word	0x40021400
 8001894:	40021800 	.word	0x40021800
 8001898:	40013c00 	.word	0x40013c00

0800189c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	807b      	strh	r3, [r7, #2]
 80018a8:	4613      	mov	r3, r2
 80018aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018ac:	787b      	ldrb	r3, [r7, #1]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018b2:	887a      	ldrh	r2, [r7, #2]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018b8:	e003      	b.n	80018c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018ba:	887b      	ldrh	r3, [r7, #2]
 80018bc:	041a      	lsls	r2, r3, #16
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	619a      	str	r2, [r3, #24]
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
	...

080018d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e0cc      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018e4:	4b68      	ldr	r3, [pc, #416]	@ (8001a88 <HAL_RCC_ClockConfig+0x1b8>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 030f 	and.w	r3, r3, #15
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d90c      	bls.n	800190c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f2:	4b65      	ldr	r3, [pc, #404]	@ (8001a88 <HAL_RCC_ClockConfig+0x1b8>)
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fa:	4b63      	ldr	r3, [pc, #396]	@ (8001a88 <HAL_RCC_ClockConfig+0x1b8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	429a      	cmp	r2, r3
 8001906:	d001      	beq.n	800190c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e0b8      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d020      	beq.n	800195a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	2b00      	cmp	r3, #0
 8001922:	d005      	beq.n	8001930 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001924:	4b59      	ldr	r3, [pc, #356]	@ (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	4a58      	ldr	r2, [pc, #352]	@ (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800192e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	2b00      	cmp	r3, #0
 800193a:	d005      	beq.n	8001948 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800193c:	4b53      	ldr	r3, [pc, #332]	@ (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	4a52      	ldr	r2, [pc, #328]	@ (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001946:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001948:	4b50      	ldr	r3, [pc, #320]	@ (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	494d      	ldr	r1, [pc, #308]	@ (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	4313      	orrs	r3, r2
 8001958:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d044      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d107      	bne.n	800197e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196e:	4b47      	ldr	r3, [pc, #284]	@ (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d119      	bne.n	80019ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e07f      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b02      	cmp	r3, #2
 8001984:	d003      	beq.n	800198e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800198a:	2b03      	cmp	r3, #3
 800198c:	d107      	bne.n	800199e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800198e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d109      	bne.n	80019ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e06f      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e067      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ae:	4b37      	ldr	r3, [pc, #220]	@ (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f023 0203 	bic.w	r2, r3, #3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	4934      	ldr	r1, [pc, #208]	@ (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019c0:	f7ff fa50 	bl	8000e64 <HAL_GetTick>
 80019c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c6:	e00a      	b.n	80019de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c8:	f7ff fa4c 	bl	8000e64 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e04f      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019de:	4b2b      	ldr	r3, [pc, #172]	@ (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 020c 	and.w	r2, r3, #12
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d1eb      	bne.n	80019c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019f0:	4b25      	ldr	r3, [pc, #148]	@ (8001a88 <HAL_RCC_ClockConfig+0x1b8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 030f 	and.w	r3, r3, #15
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d20c      	bcs.n	8001a18 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fe:	4b22      	ldr	r3, [pc, #136]	@ (8001a88 <HAL_RCC_ClockConfig+0x1b8>)
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a06:	4b20      	ldr	r3, [pc, #128]	@ (8001a88 <HAL_RCC_ClockConfig+0x1b8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 030f 	and.w	r3, r3, #15
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d001      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e032      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d008      	beq.n	8001a36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a24:	4b19      	ldr	r3, [pc, #100]	@ (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	4916      	ldr	r1, [pc, #88]	@ (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d009      	beq.n	8001a56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a42:	4b12      	ldr	r3, [pc, #72]	@ (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	490e      	ldr	r1, [pc, #56]	@ (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a56:	f000 f855 	bl	8001b04 <HAL_RCC_GetSysClockFreq>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	091b      	lsrs	r3, r3, #4
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	490a      	ldr	r1, [pc, #40]	@ (8001a90 <HAL_RCC_ClockConfig+0x1c0>)
 8001a68:	5ccb      	ldrb	r3, [r1, r3]
 8001a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6e:	4a09      	ldr	r2, [pc, #36]	@ (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001a70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001a72:	4b09      	ldr	r3, [pc, #36]	@ (8001a98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff f9b0 	bl	8000ddc <HAL_InitTick>

  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40023c00 	.word	0x40023c00
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	08002aa0 	.word	0x08002aa0
 8001a94:	20000000 	.word	0x20000000
 8001a98:	20000004 	.word	0x20000004

08001a9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001aa0:	4b03      	ldr	r3, [pc, #12]	@ (8001ab0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	20000000 	.word	0x20000000

08001ab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ab8:	f7ff fff0 	bl	8001a9c <HAL_RCC_GetHCLKFreq>
 8001abc:	4602      	mov	r2, r0
 8001abe:	4b05      	ldr	r3, [pc, #20]	@ (8001ad4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	0a9b      	lsrs	r3, r3, #10
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	4903      	ldr	r1, [pc, #12]	@ (8001ad8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aca:	5ccb      	ldrb	r3, [r1, r3]
 8001acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	08002ab0 	.word	0x08002ab0

08001adc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ae0:	f7ff ffdc 	bl	8001a9c <HAL_RCC_GetHCLKFreq>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	4b05      	ldr	r3, [pc, #20]	@ (8001afc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	0b5b      	lsrs	r3, r3, #13
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	4903      	ldr	r1, [pc, #12]	@ (8001b00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001af2:	5ccb      	ldrb	r3, [r1, r3]
 8001af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40023800 	.word	0x40023800
 8001b00:	08002ab0 	.word	0x08002ab0

08001b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b08:	b0a6      	sub	sp, #152	@ 0x98
 8001b0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b2a:	4bc8      	ldr	r3, [pc, #800]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x348>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
 8001b32:	2b0c      	cmp	r3, #12
 8001b34:	f200 817e 	bhi.w	8001e34 <HAL_RCC_GetSysClockFreq+0x330>
 8001b38:	a201      	add	r2, pc, #4	@ (adr r2, 8001b40 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b3e:	bf00      	nop
 8001b40:	08001b75 	.word	0x08001b75
 8001b44:	08001e35 	.word	0x08001e35
 8001b48:	08001e35 	.word	0x08001e35
 8001b4c:	08001e35 	.word	0x08001e35
 8001b50:	08001b7d 	.word	0x08001b7d
 8001b54:	08001e35 	.word	0x08001e35
 8001b58:	08001e35 	.word	0x08001e35
 8001b5c:	08001e35 	.word	0x08001e35
 8001b60:	08001b85 	.word	0x08001b85
 8001b64:	08001e35 	.word	0x08001e35
 8001b68:	08001e35 	.word	0x08001e35
 8001b6c:	08001e35 	.word	0x08001e35
 8001b70:	08001cef 	.word	0x08001cef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b74:	4bb6      	ldr	r3, [pc, #728]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001b76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001b7a:	e15f      	b.n	8001e3c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b7c:	4bb5      	ldr	r3, [pc, #724]	@ (8001e54 <HAL_RCC_GetSysClockFreq+0x350>)
 8001b7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001b82:	e15b      	b.n	8001e3c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b84:	4bb1      	ldr	r3, [pc, #708]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x348>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b90:	4bae      	ldr	r3, [pc, #696]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x348>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d031      	beq.n	8001c00 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b9c:	4bab      	ldr	r3, [pc, #684]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x348>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	099b      	lsrs	r3, r3, #6
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001ba6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001ba8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bae:	663b      	str	r3, [r7, #96]	@ 0x60
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	667b      	str	r3, [r7, #100]	@ 0x64
 8001bb4:	4ba7      	ldr	r3, [pc, #668]	@ (8001e54 <HAL_RCC_GetSysClockFreq+0x350>)
 8001bb6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001bba:	462a      	mov	r2, r5
 8001bbc:	fb03 f202 	mul.w	r2, r3, r2
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	4621      	mov	r1, r4
 8001bc4:	fb01 f303 	mul.w	r3, r1, r3
 8001bc8:	4413      	add	r3, r2
 8001bca:	4aa2      	ldr	r2, [pc, #648]	@ (8001e54 <HAL_RCC_GetSysClockFreq+0x350>)
 8001bcc:	4621      	mov	r1, r4
 8001bce:	fba1 1202 	umull	r1, r2, r1, r2
 8001bd2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001bd4:	460a      	mov	r2, r1
 8001bd6:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001bd8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001bda:	4413      	add	r3, r2
 8001bdc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001bde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001be2:	2200      	movs	r2, #0
 8001be4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001be6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001be8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001bec:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001bf0:	f7fe fb08 	bl	8000204 <__aeabi_uldivmod>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001bfe:	e064      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c00:	4b92      	ldr	r3, [pc, #584]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x348>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	099b      	lsrs	r3, r3, #6
 8001c06:	2200      	movs	r2, #0
 8001c08:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c0a:	657a      	str	r2, [r7, #84]	@ 0x54
 8001c0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c14:	2300      	movs	r3, #0
 8001c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c18:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001c1c:	4622      	mov	r2, r4
 8001c1e:	462b      	mov	r3, r5
 8001c20:	f04f 0000 	mov.w	r0, #0
 8001c24:	f04f 0100 	mov.w	r1, #0
 8001c28:	0159      	lsls	r1, r3, #5
 8001c2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c2e:	0150      	lsls	r0, r2, #5
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4621      	mov	r1, r4
 8001c36:	1a51      	subs	r1, r2, r1
 8001c38:	6139      	str	r1, [r7, #16]
 8001c3a:	4629      	mov	r1, r5
 8001c3c:	eb63 0301 	sbc.w	r3, r3, r1
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	f04f 0300 	mov.w	r3, #0
 8001c4a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c4e:	4659      	mov	r1, fp
 8001c50:	018b      	lsls	r3, r1, #6
 8001c52:	4651      	mov	r1, sl
 8001c54:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c58:	4651      	mov	r1, sl
 8001c5a:	018a      	lsls	r2, r1, #6
 8001c5c:	4651      	mov	r1, sl
 8001c5e:	ebb2 0801 	subs.w	r8, r2, r1
 8001c62:	4659      	mov	r1, fp
 8001c64:	eb63 0901 	sbc.w	r9, r3, r1
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c74:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c78:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c7c:	4690      	mov	r8, r2
 8001c7e:	4699      	mov	r9, r3
 8001c80:	4623      	mov	r3, r4
 8001c82:	eb18 0303 	adds.w	r3, r8, r3
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	462b      	mov	r3, r5
 8001c8a:	eb49 0303 	adc.w	r3, r9, r3
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c9c:	4629      	mov	r1, r5
 8001c9e:	028b      	lsls	r3, r1, #10
 8001ca0:	4621      	mov	r1, r4
 8001ca2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ca6:	4621      	mov	r1, r4
 8001ca8:	028a      	lsls	r2, r1, #10
 8001caa:	4610      	mov	r0, r2
 8001cac:	4619      	mov	r1, r3
 8001cae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8001cb6:	647a      	str	r2, [r7, #68]	@ 0x44
 8001cb8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001cbc:	f7fe faa2 	bl	8000204 <__aeabi_uldivmod>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001cca:	4b60      	ldr	r3, [pc, #384]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x348>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	0c1b      	lsrs	r3, r3, #16
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8001cdc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001ce0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001cec:	e0a6      	b.n	8001e3c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cee:	4b57      	ldr	r3, [pc, #348]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x348>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cf6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cfa:	4b54      	ldr	r3, [pc, #336]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x348>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d02a      	beq.n	8001d5c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d06:	4b51      	ldr	r3, [pc, #324]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x348>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	099b      	lsrs	r3, r3, #6
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d14:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d18:	2100      	movs	r1, #0
 8001d1a:	4b4e      	ldr	r3, [pc, #312]	@ (8001e54 <HAL_RCC_GetSysClockFreq+0x350>)
 8001d1c:	fb03 f201 	mul.w	r2, r3, r1
 8001d20:	2300      	movs	r3, #0
 8001d22:	fb00 f303 	mul.w	r3, r0, r3
 8001d26:	4413      	add	r3, r2
 8001d28:	4a4a      	ldr	r2, [pc, #296]	@ (8001e54 <HAL_RCC_GetSysClockFreq+0x350>)
 8001d2a:	fba0 1202 	umull	r1, r2, r0, r2
 8001d2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001d30:	460a      	mov	r2, r1
 8001d32:	673a      	str	r2, [r7, #112]	@ 0x70
 8001d34:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001d36:	4413      	add	r3, r2
 8001d38:	677b      	str	r3, [r7, #116]	@ 0x74
 8001d3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d3e:	2200      	movs	r2, #0
 8001d40:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d42:	637a      	str	r2, [r7, #52]	@ 0x34
 8001d44:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001d48:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001d4c:	f7fe fa5a 	bl	8000204 <__aeabi_uldivmod>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	4613      	mov	r3, r2
 8001d56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001d5a:	e05b      	b.n	8001e14 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d5c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x348>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	099b      	lsrs	r3, r3, #6
 8001d62:	2200      	movs	r2, #0
 8001d64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d6e:	623b      	str	r3, [r7, #32]
 8001d70:	2300      	movs	r3, #0
 8001d72:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d78:	4642      	mov	r2, r8
 8001d7a:	464b      	mov	r3, r9
 8001d7c:	f04f 0000 	mov.w	r0, #0
 8001d80:	f04f 0100 	mov.w	r1, #0
 8001d84:	0159      	lsls	r1, r3, #5
 8001d86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d8a:	0150      	lsls	r0, r2, #5
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4641      	mov	r1, r8
 8001d92:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d96:	4649      	mov	r1, r9
 8001d98:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	f04f 0300 	mov.w	r3, #0
 8001da4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001da8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001dac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001db0:	ebb2 040a 	subs.w	r4, r2, sl
 8001db4:	eb63 050b 	sbc.w	r5, r3, fp
 8001db8:	f04f 0200 	mov.w	r2, #0
 8001dbc:	f04f 0300 	mov.w	r3, #0
 8001dc0:	00eb      	lsls	r3, r5, #3
 8001dc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dc6:	00e2      	lsls	r2, r4, #3
 8001dc8:	4614      	mov	r4, r2
 8001dca:	461d      	mov	r5, r3
 8001dcc:	4643      	mov	r3, r8
 8001dce:	18e3      	adds	r3, r4, r3
 8001dd0:	603b      	str	r3, [r7, #0]
 8001dd2:	464b      	mov	r3, r9
 8001dd4:	eb45 0303 	adc.w	r3, r5, r3
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	f04f 0300 	mov.w	r3, #0
 8001de2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001de6:	4629      	mov	r1, r5
 8001de8:	028b      	lsls	r3, r1, #10
 8001dea:	4621      	mov	r1, r4
 8001dec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001df0:	4621      	mov	r1, r4
 8001df2:	028a      	lsls	r2, r1, #10
 8001df4:	4610      	mov	r0, r2
 8001df6:	4619      	mov	r1, r3
 8001df8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	61bb      	str	r3, [r7, #24]
 8001e00:	61fa      	str	r2, [r7, #28]
 8001e02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e06:	f7fe f9fd 	bl	8000204 <__aeabi_uldivmod>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4613      	mov	r3, r2
 8001e10:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001e14:	4b0d      	ldr	r3, [pc, #52]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x348>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	0f1b      	lsrs	r3, r3, #28
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8001e22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001e26:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001e32:	e003      	b.n	8001e3c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e34:	4b06      	ldr	r3, [pc, #24]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001e36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001e3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3798      	adds	r7, #152	@ 0x98
 8001e44:	46bd      	mov	sp, r7
 8001e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	00f42400 	.word	0x00f42400
 8001e54:	017d7840 	.word	0x017d7840

08001e58 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e28d      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 8083 	beq.w	8001f7e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e78:	4b94      	ldr	r3, [pc, #592]	@ (80020cc <HAL_RCC_OscConfig+0x274>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 030c 	and.w	r3, r3, #12
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d019      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001e84:	4b91      	ldr	r3, [pc, #580]	@ (80020cc <HAL_RCC_OscConfig+0x274>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 030c 	and.w	r3, r3, #12
        || \
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d106      	bne.n	8001e9e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001e90:	4b8e      	ldr	r3, [pc, #568]	@ (80020cc <HAL_RCC_OscConfig+0x274>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e9c:	d00c      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e9e:	4b8b      	ldr	r3, [pc, #556]	@ (80020cc <HAL_RCC_OscConfig+0x274>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001ea6:	2b0c      	cmp	r3, #12
 8001ea8:	d112      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eaa:	4b88      	ldr	r3, [pc, #544]	@ (80020cc <HAL_RCC_OscConfig+0x274>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001eb6:	d10b      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb8:	4b84      	ldr	r3, [pc, #528]	@ (80020cc <HAL_RCC_OscConfig+0x274>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d05b      	beq.n	8001f7c <HAL_RCC_OscConfig+0x124>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d157      	bne.n	8001f7c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e25a      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ed8:	d106      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x90>
 8001eda:	4b7c      	ldr	r3, [pc, #496]	@ (80020cc <HAL_RCC_OscConfig+0x274>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a7b      	ldr	r2, [pc, #492]	@ (80020cc <HAL_RCC_OscConfig+0x274>)
 8001ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	e01d      	b.n	8001f24 <HAL_RCC_OscConfig+0xcc>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ef0:	d10c      	bne.n	8001f0c <HAL_RCC_OscConfig+0xb4>
 8001ef2:	4b76      	ldr	r3, [pc, #472]	@ (80020cc <HAL_RCC_OscConfig+0x274>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a75      	ldr	r2, [pc, #468]	@ (80020cc <HAL_RCC_OscConfig+0x274>)
 8001ef8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	4b73      	ldr	r3, [pc, #460]	@ (80020cc <HAL_RCC_OscConfig+0x274>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a72      	ldr	r2, [pc, #456]	@ (80020cc <HAL_RCC_OscConfig+0x274>)
 8001f04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	e00b      	b.n	8001f24 <HAL_RCC_OscConfig+0xcc>
 8001f0c:	4b6f      	ldr	r3, [pc, #444]	@ (80020cc <HAL_RCC_OscConfig+0x274>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a6e      	ldr	r2, [pc, #440]	@ (80020cc <HAL_RCC_OscConfig+0x274>)
 8001f12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	4b6c      	ldr	r3, [pc, #432]	@ (80020cc <HAL_RCC_OscConfig+0x274>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a6b      	ldr	r2, [pc, #428]	@ (80020cc <HAL_RCC_OscConfig+0x274>)
 8001f1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d013      	beq.n	8001f54 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2c:	f7fe ff9a 	bl	8000e64 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f34:	f7fe ff96 	bl	8000e64 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b64      	cmp	r3, #100	@ 0x64
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e21f      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f46:	4b61      	ldr	r3, [pc, #388]	@ (80020cc <HAL_RCC_OscConfig+0x274>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0xdc>
 8001f52:	e014      	b.n	8001f7e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f54:	f7fe ff86 	bl	8000e64 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f5c:	f7fe ff82 	bl	8000e64 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	@ 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e20b      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6e:	4b57      	ldr	r3, [pc, #348]	@ (80020cc <HAL_RCC_OscConfig+0x274>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0x104>
 8001f7a:	e000      	b.n	8001f7e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d06f      	beq.n	800206a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f8a:	4b50      	ldr	r3, [pc, #320]	@ (80020cc <HAL_RCC_OscConfig+0x274>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d017      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001f96:	4b4d      	ldr	r3, [pc, #308]	@ (80020cc <HAL_RCC_OscConfig+0x274>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
        || \
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d105      	bne.n	8001fae <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001fa2:	4b4a      	ldr	r3, [pc, #296]	@ (80020cc <HAL_RCC_OscConfig+0x274>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00b      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fae:	4b47      	ldr	r3, [pc, #284]	@ (80020cc <HAL_RCC_OscConfig+0x274>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001fb6:	2b0c      	cmp	r3, #12
 8001fb8:	d11c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fba:	4b44      	ldr	r3, [pc, #272]	@ (80020cc <HAL_RCC_OscConfig+0x274>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d116      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc6:	4b41      	ldr	r3, [pc, #260]	@ (80020cc <HAL_RCC_OscConfig+0x274>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d005      	beq.n	8001fde <HAL_RCC_OscConfig+0x186>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d001      	beq.n	8001fde <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e1d3      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fde:	4b3b      	ldr	r3, [pc, #236]	@ (80020cc <HAL_RCC_OscConfig+0x274>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4937      	ldr	r1, [pc, #220]	@ (80020cc <HAL_RCC_OscConfig+0x274>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff2:	e03a      	b.n	800206a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d020      	beq.n	800203e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ffc:	4b34      	ldr	r3, [pc, #208]	@ (80020d0 <HAL_RCC_OscConfig+0x278>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002002:	f7fe ff2f 	bl	8000e64 <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800200a:	f7fe ff2b 	bl	8000e64 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e1b4      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201c:	4b2b      	ldr	r3, [pc, #172]	@ (80020cc <HAL_RCC_OscConfig+0x274>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0f0      	beq.n	800200a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002028:	4b28      	ldr	r3, [pc, #160]	@ (80020cc <HAL_RCC_OscConfig+0x274>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4925      	ldr	r1, [pc, #148]	@ (80020cc <HAL_RCC_OscConfig+0x274>)
 8002038:	4313      	orrs	r3, r2
 800203a:	600b      	str	r3, [r1, #0]
 800203c:	e015      	b.n	800206a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800203e:	4b24      	ldr	r3, [pc, #144]	@ (80020d0 <HAL_RCC_OscConfig+0x278>)
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002044:	f7fe ff0e 	bl	8000e64 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800204c:	f7fe ff0a 	bl	8000e64 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e193      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205e:	4b1b      	ldr	r3, [pc, #108]	@ (80020cc <HAL_RCC_OscConfig+0x274>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b00      	cmp	r3, #0
 8002074:	d036      	beq.n	80020e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d016      	beq.n	80020ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800207e:	4b15      	ldr	r3, [pc, #84]	@ (80020d4 <HAL_RCC_OscConfig+0x27c>)
 8002080:	2201      	movs	r2, #1
 8002082:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002084:	f7fe feee 	bl	8000e64 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800208c:	f7fe feea 	bl	8000e64 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e173      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209e:	4b0b      	ldr	r3, [pc, #44]	@ (80020cc <HAL_RCC_OscConfig+0x274>)
 80020a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f0      	beq.n	800208c <HAL_RCC_OscConfig+0x234>
 80020aa:	e01b      	b.n	80020e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ac:	4b09      	ldr	r3, [pc, #36]	@ (80020d4 <HAL_RCC_OscConfig+0x27c>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b2:	f7fe fed7 	bl	8000e64 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b8:	e00e      	b.n	80020d8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ba:	f7fe fed3 	bl	8000e64 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d907      	bls.n	80020d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e15c      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
 80020cc:	40023800 	.word	0x40023800
 80020d0:	42470000 	.word	0x42470000
 80020d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d8:	4b8a      	ldr	r3, [pc, #552]	@ (8002304 <HAL_RCC_OscConfig+0x4ac>)
 80020da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1ea      	bne.n	80020ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 8097 	beq.w	8002220 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020f2:	2300      	movs	r3, #0
 80020f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020f6:	4b83      	ldr	r3, [pc, #524]	@ (8002304 <HAL_RCC_OscConfig+0x4ac>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10f      	bne.n	8002122 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	4b7f      	ldr	r3, [pc, #508]	@ (8002304 <HAL_RCC_OscConfig+0x4ac>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210a:	4a7e      	ldr	r2, [pc, #504]	@ (8002304 <HAL_RCC_OscConfig+0x4ac>)
 800210c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002110:	6413      	str	r3, [r2, #64]	@ 0x40
 8002112:	4b7c      	ldr	r3, [pc, #496]	@ (8002304 <HAL_RCC_OscConfig+0x4ac>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002116:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800211a:	60bb      	str	r3, [r7, #8]
 800211c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800211e:	2301      	movs	r3, #1
 8002120:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002122:	4b79      	ldr	r3, [pc, #484]	@ (8002308 <HAL_RCC_OscConfig+0x4b0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800212a:	2b00      	cmp	r3, #0
 800212c:	d118      	bne.n	8002160 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800212e:	4b76      	ldr	r3, [pc, #472]	@ (8002308 <HAL_RCC_OscConfig+0x4b0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a75      	ldr	r2, [pc, #468]	@ (8002308 <HAL_RCC_OscConfig+0x4b0>)
 8002134:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002138:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800213a:	f7fe fe93 	bl	8000e64 <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002142:	f7fe fe8f 	bl	8000e64 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e118      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002154:	4b6c      	ldr	r3, [pc, #432]	@ (8002308 <HAL_RCC_OscConfig+0x4b0>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0f0      	beq.n	8002142 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d106      	bne.n	8002176 <HAL_RCC_OscConfig+0x31e>
 8002168:	4b66      	ldr	r3, [pc, #408]	@ (8002304 <HAL_RCC_OscConfig+0x4ac>)
 800216a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800216c:	4a65      	ldr	r2, [pc, #404]	@ (8002304 <HAL_RCC_OscConfig+0x4ac>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	6713      	str	r3, [r2, #112]	@ 0x70
 8002174:	e01c      	b.n	80021b0 <HAL_RCC_OscConfig+0x358>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b05      	cmp	r3, #5
 800217c:	d10c      	bne.n	8002198 <HAL_RCC_OscConfig+0x340>
 800217e:	4b61      	ldr	r3, [pc, #388]	@ (8002304 <HAL_RCC_OscConfig+0x4ac>)
 8002180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002182:	4a60      	ldr	r2, [pc, #384]	@ (8002304 <HAL_RCC_OscConfig+0x4ac>)
 8002184:	f043 0304 	orr.w	r3, r3, #4
 8002188:	6713      	str	r3, [r2, #112]	@ 0x70
 800218a:	4b5e      	ldr	r3, [pc, #376]	@ (8002304 <HAL_RCC_OscConfig+0x4ac>)
 800218c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800218e:	4a5d      	ldr	r2, [pc, #372]	@ (8002304 <HAL_RCC_OscConfig+0x4ac>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	6713      	str	r3, [r2, #112]	@ 0x70
 8002196:	e00b      	b.n	80021b0 <HAL_RCC_OscConfig+0x358>
 8002198:	4b5a      	ldr	r3, [pc, #360]	@ (8002304 <HAL_RCC_OscConfig+0x4ac>)
 800219a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800219c:	4a59      	ldr	r2, [pc, #356]	@ (8002304 <HAL_RCC_OscConfig+0x4ac>)
 800219e:	f023 0301 	bic.w	r3, r3, #1
 80021a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80021a4:	4b57      	ldr	r3, [pc, #348]	@ (8002304 <HAL_RCC_OscConfig+0x4ac>)
 80021a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a8:	4a56      	ldr	r2, [pc, #344]	@ (8002304 <HAL_RCC_OscConfig+0x4ac>)
 80021aa:	f023 0304 	bic.w	r3, r3, #4
 80021ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d015      	beq.n	80021e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b8:	f7fe fe54 	bl	8000e64 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021be:	e00a      	b.n	80021d6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c0:	f7fe fe50 	bl	8000e64 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e0d7      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d6:	4b4b      	ldr	r3, [pc, #300]	@ (8002304 <HAL_RCC_OscConfig+0x4ac>)
 80021d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0ee      	beq.n	80021c0 <HAL_RCC_OscConfig+0x368>
 80021e2:	e014      	b.n	800220e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e4:	f7fe fe3e 	bl	8000e64 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ea:	e00a      	b.n	8002202 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ec:	f7fe fe3a 	bl	8000e64 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e0c1      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002202:	4b40      	ldr	r3, [pc, #256]	@ (8002304 <HAL_RCC_OscConfig+0x4ac>)
 8002204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1ee      	bne.n	80021ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800220e:	7dfb      	ldrb	r3, [r7, #23]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d105      	bne.n	8002220 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002214:	4b3b      	ldr	r3, [pc, #236]	@ (8002304 <HAL_RCC_OscConfig+0x4ac>)
 8002216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002218:	4a3a      	ldr	r2, [pc, #232]	@ (8002304 <HAL_RCC_OscConfig+0x4ac>)
 800221a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800221e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 80ad 	beq.w	8002384 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800222a:	4b36      	ldr	r3, [pc, #216]	@ (8002304 <HAL_RCC_OscConfig+0x4ac>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 030c 	and.w	r3, r3, #12
 8002232:	2b08      	cmp	r3, #8
 8002234:	d060      	beq.n	80022f8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	2b02      	cmp	r3, #2
 800223c:	d145      	bne.n	80022ca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223e:	4b33      	ldr	r3, [pc, #204]	@ (800230c <HAL_RCC_OscConfig+0x4b4>)
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002244:	f7fe fe0e 	bl	8000e64 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224c:	f7fe fe0a 	bl	8000e64 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e093      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225e:	4b29      	ldr	r3, [pc, #164]	@ (8002304 <HAL_RCC_OscConfig+0x4ac>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69da      	ldr	r2, [r3, #28]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002278:	019b      	lsls	r3, r3, #6
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002280:	085b      	lsrs	r3, r3, #1
 8002282:	3b01      	subs	r3, #1
 8002284:	041b      	lsls	r3, r3, #16
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800228c:	061b      	lsls	r3, r3, #24
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002294:	071b      	lsls	r3, r3, #28
 8002296:	491b      	ldr	r1, [pc, #108]	@ (8002304 <HAL_RCC_OscConfig+0x4ac>)
 8002298:	4313      	orrs	r3, r2
 800229a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800229c:	4b1b      	ldr	r3, [pc, #108]	@ (800230c <HAL_RCC_OscConfig+0x4b4>)
 800229e:	2201      	movs	r2, #1
 80022a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a2:	f7fe fddf 	bl	8000e64 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022aa:	f7fe fddb 	bl	8000e64 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e064      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022bc:	4b11      	ldr	r3, [pc, #68]	@ (8002304 <HAL_RCC_OscConfig+0x4ac>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0f0      	beq.n	80022aa <HAL_RCC_OscConfig+0x452>
 80022c8:	e05c      	b.n	8002384 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ca:	4b10      	ldr	r3, [pc, #64]	@ (800230c <HAL_RCC_OscConfig+0x4b4>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d0:	f7fe fdc8 	bl	8000e64 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d8:	f7fe fdc4 	bl	8000e64 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e04d      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ea:	4b06      	ldr	r3, [pc, #24]	@ (8002304 <HAL_RCC_OscConfig+0x4ac>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0x480>
 80022f6:	e045      	b.n	8002384 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d107      	bne.n	8002310 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e040      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
 8002304:	40023800 	.word	0x40023800
 8002308:	40007000 	.word	0x40007000
 800230c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002310:	4b1f      	ldr	r3, [pc, #124]	@ (8002390 <HAL_RCC_OscConfig+0x538>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d030      	beq.n	8002380 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002328:	429a      	cmp	r2, r3
 800232a:	d129      	bne.n	8002380 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002336:	429a      	cmp	r2, r3
 8002338:	d122      	bne.n	8002380 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002340:	4013      	ands	r3, r2
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002346:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002348:	4293      	cmp	r3, r2
 800234a:	d119      	bne.n	8002380 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002356:	085b      	lsrs	r3, r3, #1
 8002358:	3b01      	subs	r3, #1
 800235a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800235c:	429a      	cmp	r2, r3
 800235e:	d10f      	bne.n	8002380 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800236a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800236c:	429a      	cmp	r2, r3
 800236e:	d107      	bne.n	8002380 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800237c:	429a      	cmp	r2, r3
 800237e:	d001      	beq.n	8002384 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e000      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40023800 	.word	0x40023800

08002394 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e07b      	b.n	800249e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d108      	bne.n	80023c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023b6:	d009      	beq.n	80023cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	61da      	str	r2, [r3, #28]
 80023be:	e005      	b.n	80023cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d106      	bne.n	80023ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7fe faa6 	bl	8000938 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2202      	movs	r2, #2
 80023f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002402:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002414:	431a      	orrs	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800243c:	431a      	orrs	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002450:	ea42 0103 	orr.w	r1, r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002458:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	430a      	orrs	r2, r1
 8002462:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	0c1b      	lsrs	r3, r3, #16
 800246a:	f003 0104 	and.w	r1, r3, #4
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002472:	f003 0210 	and.w	r2, r3, #16
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	69da      	ldr	r2, [r3, #28]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800248c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b082      	sub	sp, #8
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e042      	b.n	800253e <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d106      	bne.n	80024d2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7fe fb63 	bl	8000b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2224      	movs	r2, #36	@ 0x24
 80024d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68da      	ldr	r2, [r3, #12]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024e8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 f82c 	bl	8002548 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	691a      	ldr	r2, [r3, #16]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80024fe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	695a      	ldr	r2, [r3, #20]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800250e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800251e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2220      	movs	r2, #32
 800252a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2220      	movs	r2, #32
 8002532:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800254c:	b0c0      	sub	sp, #256	@ 0x100
 800254e:	af00      	add	r7, sp, #0
 8002550:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002564:	68d9      	ldr	r1, [r3, #12]
 8002566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	ea40 0301 	orr.w	r3, r0, r1
 8002570:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	431a      	orrs	r2, r3
 8002580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	431a      	orrs	r2, r3
 8002588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	4313      	orrs	r3, r2
 8002590:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80025a0:	f021 010c 	bic.w	r1, r1, #12
 80025a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80025ae:	430b      	orrs	r3, r1
 80025b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80025be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025c2:	6999      	ldr	r1, [r3, #24]
 80025c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	ea40 0301 	orr.w	r3, r0, r1
 80025ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	4b8f      	ldr	r3, [pc, #572]	@ (8002814 <UART_SetConfig+0x2cc>)
 80025d8:	429a      	cmp	r2, r3
 80025da:	d005      	beq.n	80025e8 <UART_SetConfig+0xa0>
 80025dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	4b8d      	ldr	r3, [pc, #564]	@ (8002818 <UART_SetConfig+0x2d0>)
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d104      	bne.n	80025f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025e8:	f7ff fa78 	bl	8001adc <HAL_RCC_GetPCLK2Freq>
 80025ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80025f0:	e003      	b.n	80025fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025f2:	f7ff fa5f 	bl	8001ab4 <HAL_RCC_GetPCLK1Freq>
 80025f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002604:	f040 810c 	bne.w	8002820 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002608:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800260c:	2200      	movs	r2, #0
 800260e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002612:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002616:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800261a:	4622      	mov	r2, r4
 800261c:	462b      	mov	r3, r5
 800261e:	1891      	adds	r1, r2, r2
 8002620:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002622:	415b      	adcs	r3, r3
 8002624:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002626:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800262a:	4621      	mov	r1, r4
 800262c:	eb12 0801 	adds.w	r8, r2, r1
 8002630:	4629      	mov	r1, r5
 8002632:	eb43 0901 	adc.w	r9, r3, r1
 8002636:	f04f 0200 	mov.w	r2, #0
 800263a:	f04f 0300 	mov.w	r3, #0
 800263e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002642:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002646:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800264a:	4690      	mov	r8, r2
 800264c:	4699      	mov	r9, r3
 800264e:	4623      	mov	r3, r4
 8002650:	eb18 0303 	adds.w	r3, r8, r3
 8002654:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002658:	462b      	mov	r3, r5
 800265a:	eb49 0303 	adc.w	r3, r9, r3
 800265e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800266e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002672:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002676:	460b      	mov	r3, r1
 8002678:	18db      	adds	r3, r3, r3
 800267a:	653b      	str	r3, [r7, #80]	@ 0x50
 800267c:	4613      	mov	r3, r2
 800267e:	eb42 0303 	adc.w	r3, r2, r3
 8002682:	657b      	str	r3, [r7, #84]	@ 0x54
 8002684:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002688:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800268c:	f7fd fdba 	bl	8000204 <__aeabi_uldivmod>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4b61      	ldr	r3, [pc, #388]	@ (800281c <UART_SetConfig+0x2d4>)
 8002696:	fba3 2302 	umull	r2, r3, r3, r2
 800269a:	095b      	lsrs	r3, r3, #5
 800269c:	011c      	lsls	r4, r3, #4
 800269e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026a2:	2200      	movs	r2, #0
 80026a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80026a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80026ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80026b0:	4642      	mov	r2, r8
 80026b2:	464b      	mov	r3, r9
 80026b4:	1891      	adds	r1, r2, r2
 80026b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80026b8:	415b      	adcs	r3, r3
 80026ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80026c0:	4641      	mov	r1, r8
 80026c2:	eb12 0a01 	adds.w	sl, r2, r1
 80026c6:	4649      	mov	r1, r9
 80026c8:	eb43 0b01 	adc.w	fp, r3, r1
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	f04f 0300 	mov.w	r3, #0
 80026d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026e0:	4692      	mov	sl, r2
 80026e2:	469b      	mov	fp, r3
 80026e4:	4643      	mov	r3, r8
 80026e6:	eb1a 0303 	adds.w	r3, sl, r3
 80026ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80026ee:	464b      	mov	r3, r9
 80026f0:	eb4b 0303 	adc.w	r3, fp, r3
 80026f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80026f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002704:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002708:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800270c:	460b      	mov	r3, r1
 800270e:	18db      	adds	r3, r3, r3
 8002710:	643b      	str	r3, [r7, #64]	@ 0x40
 8002712:	4613      	mov	r3, r2
 8002714:	eb42 0303 	adc.w	r3, r2, r3
 8002718:	647b      	str	r3, [r7, #68]	@ 0x44
 800271a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800271e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002722:	f7fd fd6f 	bl	8000204 <__aeabi_uldivmod>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	4611      	mov	r1, r2
 800272c:	4b3b      	ldr	r3, [pc, #236]	@ (800281c <UART_SetConfig+0x2d4>)
 800272e:	fba3 2301 	umull	r2, r3, r3, r1
 8002732:	095b      	lsrs	r3, r3, #5
 8002734:	2264      	movs	r2, #100	@ 0x64
 8002736:	fb02 f303 	mul.w	r3, r2, r3
 800273a:	1acb      	subs	r3, r1, r3
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002742:	4b36      	ldr	r3, [pc, #216]	@ (800281c <UART_SetConfig+0x2d4>)
 8002744:	fba3 2302 	umull	r2, r3, r3, r2
 8002748:	095b      	lsrs	r3, r3, #5
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002750:	441c      	add	r4, r3
 8002752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002756:	2200      	movs	r2, #0
 8002758:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800275c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002760:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002764:	4642      	mov	r2, r8
 8002766:	464b      	mov	r3, r9
 8002768:	1891      	adds	r1, r2, r2
 800276a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800276c:	415b      	adcs	r3, r3
 800276e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002770:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002774:	4641      	mov	r1, r8
 8002776:	1851      	adds	r1, r2, r1
 8002778:	6339      	str	r1, [r7, #48]	@ 0x30
 800277a:	4649      	mov	r1, r9
 800277c:	414b      	adcs	r3, r1
 800277e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800278c:	4659      	mov	r1, fp
 800278e:	00cb      	lsls	r3, r1, #3
 8002790:	4651      	mov	r1, sl
 8002792:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002796:	4651      	mov	r1, sl
 8002798:	00ca      	lsls	r2, r1, #3
 800279a:	4610      	mov	r0, r2
 800279c:	4619      	mov	r1, r3
 800279e:	4603      	mov	r3, r0
 80027a0:	4642      	mov	r2, r8
 80027a2:	189b      	adds	r3, r3, r2
 80027a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80027a8:	464b      	mov	r3, r9
 80027aa:	460a      	mov	r2, r1
 80027ac:	eb42 0303 	adc.w	r3, r2, r3
 80027b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80027b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80027c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80027c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80027c8:	460b      	mov	r3, r1
 80027ca:	18db      	adds	r3, r3, r3
 80027cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027ce:	4613      	mov	r3, r2
 80027d0:	eb42 0303 	adc.w	r3, r2, r3
 80027d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80027da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80027de:	f7fd fd11 	bl	8000204 <__aeabi_uldivmod>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	4b0d      	ldr	r3, [pc, #52]	@ (800281c <UART_SetConfig+0x2d4>)
 80027e8:	fba3 1302 	umull	r1, r3, r3, r2
 80027ec:	095b      	lsrs	r3, r3, #5
 80027ee:	2164      	movs	r1, #100	@ 0x64
 80027f0:	fb01 f303 	mul.w	r3, r1, r3
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	3332      	adds	r3, #50	@ 0x32
 80027fa:	4a08      	ldr	r2, [pc, #32]	@ (800281c <UART_SetConfig+0x2d4>)
 80027fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002800:	095b      	lsrs	r3, r3, #5
 8002802:	f003 0207 	and.w	r2, r3, #7
 8002806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4422      	add	r2, r4
 800280e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002810:	e106      	b.n	8002a20 <UART_SetConfig+0x4d8>
 8002812:	bf00      	nop
 8002814:	40011000 	.word	0x40011000
 8002818:	40011400 	.word	0x40011400
 800281c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002820:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002824:	2200      	movs	r2, #0
 8002826:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800282a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800282e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002832:	4642      	mov	r2, r8
 8002834:	464b      	mov	r3, r9
 8002836:	1891      	adds	r1, r2, r2
 8002838:	6239      	str	r1, [r7, #32]
 800283a:	415b      	adcs	r3, r3
 800283c:	627b      	str	r3, [r7, #36]	@ 0x24
 800283e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002842:	4641      	mov	r1, r8
 8002844:	1854      	adds	r4, r2, r1
 8002846:	4649      	mov	r1, r9
 8002848:	eb43 0501 	adc.w	r5, r3, r1
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	00eb      	lsls	r3, r5, #3
 8002856:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800285a:	00e2      	lsls	r2, r4, #3
 800285c:	4614      	mov	r4, r2
 800285e:	461d      	mov	r5, r3
 8002860:	4643      	mov	r3, r8
 8002862:	18e3      	adds	r3, r4, r3
 8002864:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002868:	464b      	mov	r3, r9
 800286a:	eb45 0303 	adc.w	r3, r5, r3
 800286e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800287e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	f04f 0300 	mov.w	r3, #0
 800288a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800288e:	4629      	mov	r1, r5
 8002890:	008b      	lsls	r3, r1, #2
 8002892:	4621      	mov	r1, r4
 8002894:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002898:	4621      	mov	r1, r4
 800289a:	008a      	lsls	r2, r1, #2
 800289c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80028a0:	f7fd fcb0 	bl	8000204 <__aeabi_uldivmod>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4b60      	ldr	r3, [pc, #384]	@ (8002a2c <UART_SetConfig+0x4e4>)
 80028aa:	fba3 2302 	umull	r2, r3, r3, r2
 80028ae:	095b      	lsrs	r3, r3, #5
 80028b0:	011c      	lsls	r4, r3, #4
 80028b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028b6:	2200      	movs	r2, #0
 80028b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80028bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80028c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80028c4:	4642      	mov	r2, r8
 80028c6:	464b      	mov	r3, r9
 80028c8:	1891      	adds	r1, r2, r2
 80028ca:	61b9      	str	r1, [r7, #24]
 80028cc:	415b      	adcs	r3, r3
 80028ce:	61fb      	str	r3, [r7, #28]
 80028d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028d4:	4641      	mov	r1, r8
 80028d6:	1851      	adds	r1, r2, r1
 80028d8:	6139      	str	r1, [r7, #16]
 80028da:	4649      	mov	r1, r9
 80028dc:	414b      	adcs	r3, r1
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	f04f 0300 	mov.w	r3, #0
 80028e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028ec:	4659      	mov	r1, fp
 80028ee:	00cb      	lsls	r3, r1, #3
 80028f0:	4651      	mov	r1, sl
 80028f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028f6:	4651      	mov	r1, sl
 80028f8:	00ca      	lsls	r2, r1, #3
 80028fa:	4610      	mov	r0, r2
 80028fc:	4619      	mov	r1, r3
 80028fe:	4603      	mov	r3, r0
 8002900:	4642      	mov	r2, r8
 8002902:	189b      	adds	r3, r3, r2
 8002904:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002908:	464b      	mov	r3, r9
 800290a:	460a      	mov	r2, r1
 800290c:	eb42 0303 	adc.w	r3, r2, r3
 8002910:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800291e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800292c:	4649      	mov	r1, r9
 800292e:	008b      	lsls	r3, r1, #2
 8002930:	4641      	mov	r1, r8
 8002932:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002936:	4641      	mov	r1, r8
 8002938:	008a      	lsls	r2, r1, #2
 800293a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800293e:	f7fd fc61 	bl	8000204 <__aeabi_uldivmod>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4611      	mov	r1, r2
 8002948:	4b38      	ldr	r3, [pc, #224]	@ (8002a2c <UART_SetConfig+0x4e4>)
 800294a:	fba3 2301 	umull	r2, r3, r3, r1
 800294e:	095b      	lsrs	r3, r3, #5
 8002950:	2264      	movs	r2, #100	@ 0x64
 8002952:	fb02 f303 	mul.w	r3, r2, r3
 8002956:	1acb      	subs	r3, r1, r3
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	3332      	adds	r3, #50	@ 0x32
 800295c:	4a33      	ldr	r2, [pc, #204]	@ (8002a2c <UART_SetConfig+0x4e4>)
 800295e:	fba2 2303 	umull	r2, r3, r2, r3
 8002962:	095b      	lsrs	r3, r3, #5
 8002964:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002968:	441c      	add	r4, r3
 800296a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800296e:	2200      	movs	r2, #0
 8002970:	673b      	str	r3, [r7, #112]	@ 0x70
 8002972:	677a      	str	r2, [r7, #116]	@ 0x74
 8002974:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002978:	4642      	mov	r2, r8
 800297a:	464b      	mov	r3, r9
 800297c:	1891      	adds	r1, r2, r2
 800297e:	60b9      	str	r1, [r7, #8]
 8002980:	415b      	adcs	r3, r3
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002988:	4641      	mov	r1, r8
 800298a:	1851      	adds	r1, r2, r1
 800298c:	6039      	str	r1, [r7, #0]
 800298e:	4649      	mov	r1, r9
 8002990:	414b      	adcs	r3, r1
 8002992:	607b      	str	r3, [r7, #4]
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80029a0:	4659      	mov	r1, fp
 80029a2:	00cb      	lsls	r3, r1, #3
 80029a4:	4651      	mov	r1, sl
 80029a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029aa:	4651      	mov	r1, sl
 80029ac:	00ca      	lsls	r2, r1, #3
 80029ae:	4610      	mov	r0, r2
 80029b0:	4619      	mov	r1, r3
 80029b2:	4603      	mov	r3, r0
 80029b4:	4642      	mov	r2, r8
 80029b6:	189b      	adds	r3, r3, r2
 80029b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029ba:	464b      	mov	r3, r9
 80029bc:	460a      	mov	r2, r1
 80029be:	eb42 0303 	adc.w	r3, r2, r3
 80029c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80029c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80029ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80029d0:	f04f 0200 	mov.w	r2, #0
 80029d4:	f04f 0300 	mov.w	r3, #0
 80029d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80029dc:	4649      	mov	r1, r9
 80029de:	008b      	lsls	r3, r1, #2
 80029e0:	4641      	mov	r1, r8
 80029e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029e6:	4641      	mov	r1, r8
 80029e8:	008a      	lsls	r2, r1, #2
 80029ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80029ee:	f7fd fc09 	bl	8000204 <__aeabi_uldivmod>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	4b0d      	ldr	r3, [pc, #52]	@ (8002a2c <UART_SetConfig+0x4e4>)
 80029f8:	fba3 1302 	umull	r1, r3, r3, r2
 80029fc:	095b      	lsrs	r3, r3, #5
 80029fe:	2164      	movs	r1, #100	@ 0x64
 8002a00:	fb01 f303 	mul.w	r3, r1, r3
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	3332      	adds	r3, #50	@ 0x32
 8002a0a:	4a08      	ldr	r2, [pc, #32]	@ (8002a2c <UART_SetConfig+0x4e4>)
 8002a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a10:	095b      	lsrs	r3, r3, #5
 8002a12:	f003 020f 	and.w	r2, r3, #15
 8002a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4422      	add	r2, r4
 8002a1e:	609a      	str	r2, [r3, #8]
}
 8002a20:	bf00      	nop
 8002a22:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002a26:	46bd      	mov	sp, r7
 8002a28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a2c:	51eb851f 	.word	0x51eb851f

08002a30 <memset>:
 8002a30:	4402      	add	r2, r0
 8002a32:	4603      	mov	r3, r0
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d100      	bne.n	8002a3a <memset+0xa>
 8002a38:	4770      	bx	lr
 8002a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a3e:	e7f9      	b.n	8002a34 <memset+0x4>

08002a40 <__libc_init_array>:
 8002a40:	b570      	push	{r4, r5, r6, lr}
 8002a42:	4d0d      	ldr	r5, [pc, #52]	@ (8002a78 <__libc_init_array+0x38>)
 8002a44:	4c0d      	ldr	r4, [pc, #52]	@ (8002a7c <__libc_init_array+0x3c>)
 8002a46:	1b64      	subs	r4, r4, r5
 8002a48:	10a4      	asrs	r4, r4, #2
 8002a4a:	2600      	movs	r6, #0
 8002a4c:	42a6      	cmp	r6, r4
 8002a4e:	d109      	bne.n	8002a64 <__libc_init_array+0x24>
 8002a50:	4d0b      	ldr	r5, [pc, #44]	@ (8002a80 <__libc_init_array+0x40>)
 8002a52:	4c0c      	ldr	r4, [pc, #48]	@ (8002a84 <__libc_init_array+0x44>)
 8002a54:	f000 f818 	bl	8002a88 <_init>
 8002a58:	1b64      	subs	r4, r4, r5
 8002a5a:	10a4      	asrs	r4, r4, #2
 8002a5c:	2600      	movs	r6, #0
 8002a5e:	42a6      	cmp	r6, r4
 8002a60:	d105      	bne.n	8002a6e <__libc_init_array+0x2e>
 8002a62:	bd70      	pop	{r4, r5, r6, pc}
 8002a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a68:	4798      	blx	r3
 8002a6a:	3601      	adds	r6, #1
 8002a6c:	e7ee      	b.n	8002a4c <__libc_init_array+0xc>
 8002a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a72:	4798      	blx	r3
 8002a74:	3601      	adds	r6, #1
 8002a76:	e7f2      	b.n	8002a5e <__libc_init_array+0x1e>
 8002a78:	08002ac0 	.word	0x08002ac0
 8002a7c:	08002ac0 	.word	0x08002ac0
 8002a80:	08002ac0 	.word	0x08002ac0
 8002a84:	08002ac4 	.word	0x08002ac4

08002a88 <_init>:
 8002a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a8a:	bf00      	nop
 8002a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a8e:	bc08      	pop	{r3}
 8002a90:	469e      	mov	lr, r3
 8002a92:	4770      	bx	lr

08002a94 <_fini>:
 8002a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a96:	bf00      	nop
 8002a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a9a:	bc08      	pop	{r3}
 8002a9c:	469e      	mov	lr, r3
 8002a9e:	4770      	bx	lr
